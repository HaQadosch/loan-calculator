{"version":3,"sources":["LoanSetting.tsx","Calculators.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoanSetting","amount","duration","setAmount","setDuration","id","htmlFor","type","name","min","max","value","step","onChange","target","Number","parseInt","required","Calculator","premium","title","loanSetting","React","useContext","LoanSettingContext","useState","rate","setRate","calcSetting","revolving_credit_facility","business_loan","isWithinAmountLimit","amount_min","amount_max","isDisabled","duration_min","duration_max","duration_","Math","amount_","className","readOnly","disabled","DenseTable","CalculatorRCF","CalculatorBL","useStyles","makeStyles","table","minWidth","classes","payments","formatCurrency","price","Intl","NumberFormat","style","currency","minimumFractionDigits","format","startingDate","Date","principalAcc","interestAcc","totalAcc","Array","fill","map","_","index","date","newMonth","getMonth","newDate","setMonth","dateISO","toISOString","newDateISO","DateTimeFormat","month","day","year","formatDate","principal_","principal","interest_","interest","total_","total","totalPlan","push","console","log","generatePlan","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","scope","initSetUp","createContext","App","setLoanSetting","useEffect","fetch","then","res","json","data","Provider","role","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bbe18781.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './LoanSetting.css'\r\n\r\ninterface ILoanSetting {\r\n  amount: number\r\n  duration: number\r\n  setAmount: React.Dispatch<React.SetStateAction<number>>\r\n  setDuration: React.Dispatch<React.SetStateAction<number>>\r\n}\r\n\r\nexport const LoanSetting: React.FC<ILoanSetting> = ({amount, duration, setAmount, setDuration}) => {\r\n\r\n  return (\r\n    <article id=\"loan-setting\">\r\n      <form >\r\n        <label htmlFor=\"amount\">Amount requested</label>\r\n        <input type=\"number\"\r\n          name=\"amount\" id=\"amount\"\r\n          min=\"1000\" max=\"200000\"\r\n          value={ amount } step=\"1000\"\r\n          onChange={ handleAmountChange }\r\n          required\r\n        />\r\n        <span>(in Â£)</span>\r\n        <label htmlFor=\"duration\">Duration</label>\r\n        <input type=\"number\"\r\n          name=\"duration\" id=\"duration\"\r\n          min=\"1\" max=\"60\"\r\n          value={ duration } step=\"1\"\r\n          onChange={ handleDurationChange }\r\n          required\r\n        />\r\n        <span>(in months)</span>\r\n      </form>\r\n    </article>\r\n  )\r\n\r\n  function handleAmountChange ({ target: { value: amount } }: React.ChangeEvent<HTMLInputElement>) {\r\n    setAmount(Number.parseInt(amount, 10))\r\n  }\r\n\r\n  function handleDurationChange ({ target: { value: duration } }: React.ChangeEvent<HTMLInputElement>) {\r\n    setDuration(Number.parseInt(duration, 10))\r\n  }\r\n}","import React from 'react'\r\nimport { LoanSettingContext } from \"./App\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\ninterface ICalculator {\r\n  premium: number\r\n  title: string\r\n  duration: number\r\n  amount: number\r\n}\r\n\r\nconst Calculator: React.FC<ICalculator> = ({ premium, title, duration, amount }) => {\r\n  const loanSetting = React.useContext(LoanSettingContext)\r\n  const [rate, setRate] = React.useState(3)\r\n\r\n  const calcSetting = premium === 0\r\n    ? loanSetting.revolving_credit_facility\r\n    : loanSetting.business_loan\r\n\r\n  const isWithinAmountLimit = calcSetting.amount_min <= amount && amount <= calcSetting.amount_max\r\n  const isWithinDurationLimit = calcSetting.duration_min <= duration && duration <= calcSetting.duration_max\r\n  const isDisabled = !(isWithinDurationLimit && isWithinAmountLimit)\r\n\r\n\r\n  let duration_ = duration\r\n  duration_ = Math.min(duration_, calcSetting.duration_max)\r\n  duration_ = Math.max(duration_, calcSetting.duration_min)\r\n\r\n  let amount_ = amount\r\n  amount_ = Math.min(amount_, calcSetting.amount_max)\r\n  amount_ = Math.max(amount_, calcSetting.amount_min)\r\n\r\n  return (\r\n    <section className={ isDisabled ? 'disabled' : 'enabled' }>\r\n      <form >\r\n        <label htmlFor=\"rate\">Interest rate</label>\r\n        <input type=\"number\"\r\n          name=\"rate\" id=\"rate\"\r\n          min=\"1\" max=\"100\"\r\n          value={ rate } step=\"1\"\r\n          onChange={ handleRateChange }\r\n          required\r\n          { ...isDisabled ? ({ readOnly: true, disabled: true }) : {} }\r\n        />\r\n        <span>(in Â£)</span>\r\n      </form>\r\n      <DenseTable premium={ premium } duration={ duration_ } amount={ amount_ } rate={ rate } />\r\n      <h2>{ title }</h2>\r\n    </section>\r\n  )\r\n\r\n  function handleRateChange ({ target: { value: rate } }: React.ChangeEvent<HTMLInputElement>) {\r\n    setRate(Number.parseInt(rate, 10))\r\n  }\r\n}\r\n\r\ninterface ICalculators {\r\n  amount: number\r\n  duration: number\r\n}\r\n\r\nexport const CalculatorRCF: React.FC<ICalculators> = ({ amount, duration }) => {\r\n\r\n  return (\r\n    <article id=\"rcf-calculator\">\r\n      <Calculator\r\n        premium={ 0 }\r\n        title='Revolving Credit Facility'\r\n        duration={ duration }\r\n        amount={ amount }\r\n      />\r\n    </article>\r\n  )\r\n}\r\n\r\nexport const CalculatorBL: React.FC<ICalculators> = ({ amount, duration }) => {\r\n\r\n  return (\r\n    <article id=\"bl-calculator\">\r\n      <Calculator\r\n        premium={ 10 }\r\n        title='Business Loan'\r\n        duration={ duration }\r\n        amount={ amount }\r\n      />\r\n    </article>\r\n  )\r\n}\r\n\r\n\r\ninterface IDenseTable {\r\n  premium: number\r\n  duration: number\r\n  amount: number\r\n  rate: number\r\n}\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 350,\r\n  },\r\n})\r\n\r\nfunction DenseTable ({ premium, amount, duration, rate }: IDenseTable): JSX.Element {\r\n  const classes = useStyles()\r\n  const payments = generatePlan({ amount, duration, premium, rate })\r\n\r\n  return (\r\n    <TableContainer component={ Paper } >\r\n      <Table className={ classes.table } size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Repayment date</TableCell>\r\n            <TableCell align=\"right\">Principal</TableCell>\r\n            <TableCell align=\"right\">Interest</TableCell>\r\n            <TableCell align=\"right\">Total repayment</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          { payments.map(({ date, principal, interest, total }) => (\r\n            <TableRow key={ date }>\r\n              <TableCell component=\"th\" scope=\"row\">{ date }</TableCell>\r\n              <TableCell align=\"right\">{ principal }</TableCell>\r\n              <TableCell align=\"right\">{ interest }</TableCell>\r\n              <TableCell align=\"right\">{ total }</TableCell>\r\n            </TableRow>\r\n          )) }\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\ninterface IGenerate {\r\n  amount: number\r\n  duration: number\r\n  premium: number\r\n  rate: number\r\n}\r\n\r\nfunction generatePlan ({ amount, duration, premium, rate }: IGenerate) {\r\n  const formatDate = (startingDate: Date, index: number) => {\r\n    const newMonth = startingDate.getMonth() + index\r\n    const newDate = new Date()\r\n    newDate.setMonth(newMonth)\r\n\r\n    const dateISO = newDate.toISOString()\r\n    const options = { month: \"2-digit\", day: \"2-digit\", year: \"numeric\" }\r\n    const newDateISO = new Date(dateISO)\r\n    return new Intl.DateTimeFormat(\"en-GB\", options).format(newDateISO)\r\n  }\r\n\r\n  const formatCurrency = (price: number) => new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP', minimumFractionDigits: 0 }).format(price)\r\n\r\n  const startingDate = new Date()\r\n\r\n  let principalAcc = amount\r\n  let interestAcc = 0\r\n  let totalAcc = 0\r\n\r\n  const payments = new Array(duration).fill(1).map((_, index) => {\r\n    const date = formatDate(startingDate, index)\r\n\r\n    const principal_ = amount / duration\r\n    const principal = formatCurrency(principal_)\r\n\r\n    const premium_ = index === 0 ? amount * (premium * 0.01) : 0\r\n    const interest_ = principalAcc * (rate * 0.01) + premium_\r\n    interestAcc += interest_\r\n\r\n    principalAcc -= principal_\r\n\r\n    const interest = formatCurrency(interest_)\r\n\r\n    const total_ = interest_ + principal_\r\n    totalAcc += total_\r\n    const total = formatCurrency(total_)\r\n\r\n    return { date, principal, interest, total }\r\n  })\r\n  const totalPlan = {\r\n    date: 'Total',\r\n    principal: formatCurrency(amount),\r\n    interest: formatCurrency(interestAcc),\r\n    total: formatCurrency(totalAcc)\r\n  }\r\n  payments.push(totalPlan)\r\n\r\n  console.log({ payments })\r\n  return payments\r\n}","import React from 'react';\nimport './App.css';\nimport { LoanSetting } from './LoanSetting';\nimport { CalculatorRCF, CalculatorBL } from './Calculators';\n\ninterface ILoanDetails {\n  amount_max: number\n  amount_min: number\n  duration_max: number\n  duration_min: number\n}\n\ninterface IMocky {\n  business_loan: ILoanDetails\n  revolving_credit_facility: ILoanDetails\n}\n\nlet initSetUp: IMocky = {\n  business_loan: {\n    amount_max: 200000,\n    amount_min: 10000,\n    duration_max: 60,\n    duration_min: 1,\n  },\n  revolving_credit_facility: {\n    amount_max: 150000,\n    amount_min: 1000,\n    duration_max: 12,\n    duration_min: 1,\n  }\n}\n\nexport const LoanSettingContext = React.createContext(initSetUp)\n\nconst App = () => {\n  const [amount, setAmount] = React.useState(10000)\n  const [duration, setDuration] = React.useState(4)\n  const [loanSetting, setLoanSetting] = React.useState(initSetUp)\n\n  React.useEffect(() => {\n    fetch('http://www.mocky.io/v2/5d4aa9e93300006f000f5ea9')\n      .then(res => res.json())\n      .then((data: IMocky) => setLoanSetting(data))\n  }, [])\n\n  return (\n    <>\n      <header>\n        <h1>\n          Your loan repayment plans\n        </h1>\n      </header>\n      <LoanSettingContext.Provider value={ loanSetting }>\n        <LoanSetting amount={ amount } duration={ duration } setAmount={ setAmount } setDuration={ setDuration } />\n        <CalculatorRCF amount={ amount } duration={ duration } />\n        <CalculatorBL amount={ amount } duration={ duration } />\n      </LoanSettingContext.Provider>\n      <footer>Talk to a real person <span role=\"img\" aria-label=\"phone\">ð</span> 020 3778 0274</footer>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}